const AppError = require('../utils/appError');

// lecture 118 -handling error with invalid database id (casterror)
const handleCastErrorDB = err => {
  const message = `Invalid ${err.path}: ${err.value}.`;
  return new AppError(message, 400);
};

// lecture 119 -handling error with duplicate name
const handleDuplicateFieldsDB = err => {
  const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0]; //study regular expression!!
  const message = `Duplicate field value: ${value}. Please use another value!`;
  return new AppError(message, 400);
};

// lecture 120 -handling validation error
const handleValidationErrorDB = err => {
  //Object.values take an object as an argument and return an array of values
  //String, map, set, arrays
  // for of, for in loop
  // filter, map, reduce array method
  const errors = Object.values(err.errors).map(el => el.message);
  const message = `Invalid input data. ${errors.join('. ')}`;
  return new AppError(message, 400);
};

const handleJWTError = () =>
  new AppError('Invalid token. Please log in again!', 401);

const handleJWTExpired = () =>
  new AppError('Your token has expired. Please log in again!', 401);

// lecture 117 error handling for dev vs. prod
// In development environment we send more information
const sendErrorDev = (err, res) => {
  res.status(err.statusCode).json({
    //err.statusCode is set by AppError class
    status: err.status, //status is set by AppError class
    error: err, //Error itself
    message: err.message, //Every Error object has a message
    stack: err.stack
  });
};

// In production environment we sent a limited information
const sendErrorProd = (err, res) => {
  // Operational, trusted error: send message to client
  if (err.isOperational) {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message
    });

    // Programming or other unknown error: Don't leak error detail
  } else {
    // 1) Log error
    console.error('ERROR: ', err);

    // 2) Send generic message
    res.status(500).json({
      status: 'error',
      message: 'Something went very wrong'
    });
  }
};

module.exports = (err, req, res, next) => {
  // All error generated by us will have statusCode and status
  err.statusCode = err.statusCode || 500; //500 is internal server error.
  err.status = err.status || 'error';
  // console.log(err.stack);

  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(err, res);
  } else if (process.env.NODE_ENV === 'production ') {
    let error = { ...err }; //To copy error as we do not want to modify original error
    // lecture 118 -handling error with invalid database id (casterror)
    if (error.name === 'CastError') error = handleCastErrorDB(error);
    // lecture 119 -handling error with duplicate name
    // naitve error from mongoDB driver contains error code.
    if (error.code === 11000) error = handleDuplicateFieldsDB(error);
    // lecture 120 -handling validation error
    if (error.name === 'ValidationError') {
      error = handleValidationErrorDB(error);
    }
    if (error.name === 'JsonWebTokenError') error = handleJWTError();
    if (error.name === 'TokenExpiredError') error = handleJWTExpired();
    sendErrorProd(error, res);
  }
};
